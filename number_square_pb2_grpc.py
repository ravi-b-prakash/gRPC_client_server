# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import number_square_pb2 as number__square__pb2


class squareStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.num_square = channel.stream_stream(
                '/num.square/num_square',
                request_serializer=number__square__pb2.request.SerializeToString,
                response_deserializer=number__square__pb2.reply.FromString,
                )


class squareServicer(object):
    """Missing associated documentation comment in .proto file."""

    def num_square(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_squareServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'num_square': grpc.stream_stream_rpc_method_handler(
                    servicer.num_square,
                    request_deserializer=number__square__pb2.request.FromString,
                    response_serializer=number__square__pb2.reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'num.square', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class square(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def num_square(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/num.square/num_square',
            number__square__pb2.request.SerializeToString,
            number__square__pb2.reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
